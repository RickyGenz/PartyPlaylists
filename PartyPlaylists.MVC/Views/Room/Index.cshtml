@model RoomVM
@{
    ViewData["Title"] = "Index";
}

<input type="hidden" id="jwtToken" name="jwtToken" value="@Model.JwtToken">
<input type="hidden" id="roomId" name="roomId" value="@Model.CurrentRoom.Id">
<input type="hidden" id="spotifyAuthCode" name="spotifyAuthCode" value="@Model.CurrentRoom.SpotifyAuthCode" />

<h1 id="roomNameHeader">@Model.CurrentRoom.Name</h1>
<h2>By: @Model.CurrentRoom.Owner</h2>
<table class="table">
    @if (Model?.CurrentRoom != null && !string.IsNullOrEmpty(Model?.CurrentRoom?.SpotifyAuthCode))
    {
        <tr>
            <th scope="col">Artist</th>
            <th scope="col">Title</th>
            <th scope="col">Playlist Rating</th>
            <th scope="col">Added By</th>
            <th scope="col">Add Vote</th>
        </tr>
        <tbody id="tableOfSongs">
            <partial name="Components/_roomSongTableRow" model="Model.CurrentRoom.RoomSongs" />
        </tbody>
    }
</table>

@if (string.IsNullOrEmpty(Model.CurrentRoom.SpotifyAuthCode))
{
    <form method="get" asp-controller="Room" asp-action="AuthorizeSpotify">
        <input type="hidden" asp-for="@Model.CurrentRoom.Id">
        <button class="btn btn-primary" type="submit" id="authorizeSpotifyButton">Authorize Spotify</button>
    </form>
}
else
{
    <label>Song: </label>
    <input asp-for="@Model.SongToAdd" id="songToAdd" />
    <br />
    <br />
    <button class="btn btn-primary" type="submit" id="addSongButton">Add Song</button>

    <br />
    <br />
    <br />
    <button class="btn btn-primary" type="button" id="startPlaylistButton">Start Playlist</button>
}


@section Scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            function postSongVote(songId) {
                $.ajax({
                    url: "/room/addvotetosong",
                    type: "POST",
                    data: {
                        "roomId": $("#roomId")[0].value,
                        "songId": songId
                    },
                    headers: {
                        'Authorization': "Bearer " + $("#jwtToken")[0].value,
                    },
                    success: function (data) {
                        $("#tableOfSongs").html(data);
                    },
                    error: function (data) {
                        console.log(data);
                    }
                });
            }

            $("[name='addVoteButton']").click(function () { postSongVote($(this).val()); })
        });
    </script>

    <script>
        function postSongData() {
            $.ajax({
                url: "/room/AddSongToRoom",
                type: "POST",
                data: {
                    "CurrentRoom.Id": $("#roomId")[0].value,
                    "CurrentRoom.SpotifyAuthCode": $("#spotifyAuthCode")[0].value,
                    "SongToAdd": $("#songToAdd")[0].value,
                },
                headers: {
                    'Authorization': "Bearer " + $("#jwtToken")[0].value,
                },
                success: function (data) {
                    $("#tableOfSongs").html(data);
                    $("#songToAdd").val('');
                },
                error: function (data) {
                    console.log(data);
                }
            });
        }

        $(document).ready(function () {
            $("#addSongButton").click(function () {
                postSongData();
            });

            $("#songToAdd").keydown(function (e) {
                if (e.keyCode == 13) {
                    postSongData();
                }
            });
        });
    </script>

    <script src="https://sdk.scdn.co/spotify-player.js"></script>
    <script>
        window.onSpotifyWebPlaybackSDKReady = () => {
            const token = $("#spotifyAuthCode").val();
            const player = new Spotify.Player({
                name: 'PartyPlaylist - ' + $("#roomNameHeader").html(),
                getOAuthToken: cb => { cb(token); }
            });

            // Error handling
            player.addListener('initialization_error', ({ message }) => { console.error(message); });
            player.addListener('authentication_error', ({ message }) => { console.error(message); });
            player.addListener('account_error', ({ message }) => { console.error(message); });
            player.addListener('playback_error', ({ message }) => { console.error(message); });

            // Playback status updates
            player.addListener('player_state_changed', state => { console.log(state); });

            // Ready
            player.addListener('ready', ({ device_id }) => {
                console.log('Ready with Device ID', device_id);
            });

            // Not Ready
            player.addListener('not_ready', ({ device_id }) => {
                console.log('Device ID has gone offline', device_id);
            });

            // Connect to the player!
            player.connect();

            $("#startPlaylistButton").click(function () {
                StartPlaylist(player, $("[name='playerUri']").first().html());
            });
        };
    </script>
    <script>
        function StartPlaylist(player, songUriToPlay) {
            const play = ({
                spotify_uri,
                playerInstance: {
                    _options: {
                        getOAuthToken,
                        id
                    }
                }
            }) => {
                getOAuthToken(access_token => {
                    fetch(`https://api.spotify.com/v1/me/player/play?device_id=${id}`, {
                        method: 'PUT',
                        body: JSON.stringify({ uris: [spotify_uri] }),
                        headers: {
                            'Content-Type': 'application/json',
                            'Authorization': `Bearer ${access_token}`
                        },
                    });
                });
            };
            play({
                playerInstance: player,
                spotify_uri: songUriToPlay,
            });
        }
    </script>

    <script src="~/js/roomhub.js"></script>
}
